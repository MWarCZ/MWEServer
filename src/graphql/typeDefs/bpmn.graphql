
type Query {
  processTemplate(filter: ProcessTemplateFilter!): ProcessTemplate
  processTemplates(filter: ProcessTemplateFilter): [ProcessTemplate!]!
  processInstance(filter: ProcessInstanceFilter!): ProcessInstance
  processInstances(filter: ProcessInstancesFilter): [ProcessInstance!]!

  nodeInstance(filter: NodeInstanceFilter!): NodeElementInstance
  nodeInstances(filter: NodeInstancesFilter): [NodeElementInstance!]!

  # Zadost. Co vse je potreba pro provedeni uzlu
  nodeAdditionsFormat(idNI: Int!): [NodeAdditions!]!
}
type Mutation {
  uploadProcess(xml: String): [ProcessTemplate]
  initProcess(input: InitProcessInput!): ProcessInstance

  nodeAdditions(idNI: Int!,input: [NodeAdditionsInput!]!): NodeElementInstance
  withdrawnProcess(idPI: Int!): ProcessInstance

  claimNodeInstance(idNI: Int!): NodeElementInstance
  releaseNodeInstance(idNI: Int!): NodeElementInstance

  deleteProcessTemplate(idPT: Int!): Boolean
  deleteProcessInstance(idPI: Int!): Boolean

  updateProcessTemplate(idPT: Int!, input: ProcessTemplateUpdateInput!): ProcessTemplate
  updateNodeTemplate(idNT: Int!, input: NodeTemplateUpdateInput!): NodeElementTemplate
}

type Subscription {
  newProcessTemplates: [ProcessTemplate!],
  deletedProcessTemplates: [ProcessTemplate!],
  changedProcessTemplates: [ProcessTemplate!],

  newProcessInstance: ProcessInstance!,
  deletedProcessInstance: ProcessInstance!,
  changedProcessInstance: ProcessInstance!,

  changedNodeInstances(idPI: Int): [NodeElementInstance!]!,
}

type NodeAdditions {
  name: String
  type: String
  default: Json
  possibilities: [Json]
  hints: String
}

# =========================
input ProcessTemplateUpdateInput {
  # bpmnId: String
  name: String
  isExecutable: Boolean
  # processType: String
  # version: String
  # versionType: String
  candidateManager: String
}
input NodeTemplateUpdateInput {
  name: String
  candidateAssignee: String
}

# =========================

input ProcessTemplateFilter {
  id: Int
  bpmnId: String
  version: String
  isExecutable: Boolean
}
input ProcessInstanceFilter {
  id: Int!
}
input NodeTemplateFilter {
  id: Int!
}
input NodeInstanceFilter {
  id: Int!
}
input ProcessInstancesFilter {
  status: String
}
input NodeInstancesFilter {
  status: String
}
# =====================
input InitProcessInput {
  """ProcessInstance will create from ProcessTemplate with this id."""
  idProcess: Int!
  """ProcessInstance will start on NodeTemplate with this id."""
  idFirstNode: Int!
}
input NodeAdditionsInput {
  name: String!
  value: Json
}
# ==============================

input PT_NodeFilterInput {
  implementationContains: String
}
input PT_InstanceFilterInput {
  status: String
}
input PI_NodeFilterInput {
  status: String
}

type ProcessTemplate {
  id: Int!
  bpmnId: String!
  name: String!

  isExecutable: Boolean!
  processType: String!
  version: String!
  versionType: String!

  candidateManager: String
  candidateGroup: Group

  instances(filter: PT_InstanceFilterInput): [ProcessInstance!]!
  dataObjects: [DataObjectTemplate!]!
  nodeElements(filter: PT_NodeFilterInput): [NodeElementTemplate!]!
  # sequenceFlows
}
type ProcessInstance {
  id: Int!
  startDateTime: Date
  endDateTime: Date
  status: String

  template: ProcessTemplate!
  data: Json

  # data
  dataObjects: [DataObjectInstance!]!
  nodeElements(filter: PI_NodeFilterInput): [NodeElementInstance!]!
  # sequenceFlows: [!]!
}
type NodeElementTemplate {
  id: Int!
  bpmnId: String!
  name: String!

  implementation: String!
  candidateAssignee: String # Jenom textova podoba
  candidateGroup: Group # Text prirazeny ke konkretni skupine

  processTemplate: ProcessTemplate!
  instances: [NodeElementInstance!]!
  # inputs
  # outputs
  # incoming
  # outgoing
}
type NodeElementInstance {
  id: Int!
  startDateTime: Date
  endDateTime: Date
  status: String

  template: NodeElementTemplate!
  processInstance: ProcessInstance!

  data: Json
  returnValue: Json
  assignee: User # TODO

}
type DataObjectTemplate {
  id: Int!
  bpmnId: String!
  name: String!

  strict: Boolean!
  json: Json

  instances: [DataObjectInstance!]!
}
type DataObjectInstance {
  id: Int!

  template: DataObjectTemplate!
  processInstance: ProcessInstance!

  data: Json
  # startDateTime: Date
  # endDateTime: Date
}

